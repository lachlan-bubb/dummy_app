# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    environment: dev

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: poetry install

    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     poetry run flake8   --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     #poetry run flake8   --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # - name: Test with pytest
    #   run: |
    #     poetry run pytest 

    - name: Build package
      run: | 
        poetry build

    - name: Print secrets
      env:
        POETRY_PYPI_USERNAME: ${{ secrets.POETRY_PYPI_USERNAME }}
        POETRY_PYPI_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN }}
        PYPI_API_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN }}
      run: |
        echo "PyPI Username: $POETRY_PYPI_USERNAME"
        echo "PyPI Token: $POETRY_PYPI_TOKEN"
        echo "PyPI Token: $PYPI_API_TOKEN"

    - name: Publish package [broken - need to update token]
      # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        POETRY_PYPI_USERNAME: ${{ secrets.POETRY_PYPI_USERNAME }}
        POETRY_PYPI_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN }}
        PYPI_API_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN }}
      run: | 
        echo $POETRY_PYPI_TOKEN
        poetry config --list
        poetry config pypi --list
        
        export POETRY_PYPI_TOKEN=__your_pypi_token__

        poetry config pypi-token.pypi $POETRY_PYPI_TOKEN
        poetry config pypi-token.pypi ${{ secrets.POETRY_PYPI_TOKEN }}

        poetry config pypi --list

        # poetry config pypi-token.pypi-username $PYPI_API_TOKEN
        poetry publish --build